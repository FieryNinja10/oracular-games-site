generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  userId     String   @unique
  birthday   DateTime @db.Date
  newsletter Boolean
  createdAt  DateTime @default(now()) @db.Timestamptz(0)
  updatedAt  DateTime @updatedAt @db.Timestamptz(0)
  user       User     @relation(name: "UserProfile", fields: [userId], references: [id], onDelete: Cascade)

  friend Friend[]
}

model Friend {
  profileId String
  friendId  String
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now()) @db.Timestamptz(0)
  updatedAt DateTime     @updatedAt @db.Timestamptz(0)

  profile Profile @relation(fields: [profileId], references: [userId])

  @@id([profileId, friendId])
}

enum FriendStatus {
  PENDING
  ACCEPTED
}

// next-auth models

model User {
  id            String    @id @default(cuid())
  username      String?   @default("Player") @db.VarChar(20)
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  profile       Profile?  @relation(name: "UserProfile")
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(0)
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}
